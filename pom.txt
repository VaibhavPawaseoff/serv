1.New

2.select Spring Starter Project

3.Enter Name

4.Type-Maven

5.Java Version-11

6.Rename group and package com.app

7.add Artifact and Management

8.Spring Boot Version 2.7.8

9.Select A.Lombok,B.MySQL Driver,C.Spring Boot DevTools,D.SpringData JPA,E.Spring 
Web,F.Validation

10.Import file Day11 //optional

11.Copy application.properties from Day11/src/main/resources to your project.


#Tomcat server port number 8080
#server.port=7070
#context path default value : empty
#server.servlet.context-path=/day9_boot
#DB properties
spring.datasource.url=jdbc:mysql://localhost:3306/advjava2?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=root
# JPA properties
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#logging.level.org.springframework.orm.hibernate5=DEBUG

# Spring MVC ViewResolver related
#spring.mvc.view.prefix=/WEB-INF/views
#spring.mvc.view.suffix=.jsp
#Disable open session in view 
spring.jpa.open-in-view=false
#property to disable hibernateLazyInitializer during initialized proxies
#spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false


12.Create com.app.controller
i.EmployeeController

i]

package com.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.pojos.Employee;
import com.app.service.EmployeeService;

@RestController
@CrossOrigin
@RequestMapping("/employees")

public class EmployeeController {
	
@Autowired
private EmployeeService empservice;


@GetMapping
public List<Employee>getAllEmps()
{
	return empservice.getAllEmpDetails();
}
@PostMapping 
public Employee saveEmpDetails(@RequestBody Employee newemp) {
	return empservice.addEmpDetails(newemp);
}

@DeleteMapping ("/{empid}")

public String deleteEmpDetails(@PathVariable Long empid)
{
	return empservice.deleteEmpDetails(empid);
}


@PutMapping
public Employee updateEmpDetails(@RequestBody Employee newupdate) {
	return empservice.updateEmpDetails(newupdate);
}

}


13.com.app.pojos

i.BaseEntity
ii.Employee

i]

package com.app.pojos;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;

@MappedSuperclass // mandatory cls level anno to tell hibernate that following is a common base
					// class to extend entities , no table generation
public class BaseEntity {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

}


ii]

package com.app.pojos;

import java.time.LocalDate;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

@Entity
@Table(name="emp")
public class Employee extends BaseEntity
{
	
	@Column(length =20)
	private String firstName;
	@Column(length =20)

	
	private String lastName;
	@Column(length =20,unique = true)

	private String email;
	@Column(length =20,nullable=false)

	private String password;
	private String department;
	private String location;
	private LocalDate joindate;
	private double salary;
	
	
	public Employee() {
		
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public String getLocation() {
		return location;
	}
	public void setLocation(String location) {
		this.location = location;
	}
	public LocalDate getJoindate() {
		return joindate;
	}
	public void setJoindate(LocalDate joindate) {
		this.joindate = joindate;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public Employee(String firstName, String lastName, String email, String password, String department,
			String location, LocalDate joindate, double salary) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.department = department;
		this.location = location;
		this.joindate = joindate;
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [firstName=" + firstName + ", lastName=" + lastName + ", email=" + email + ", password="
				+ password + ", department=" + department + ", location=" + location + ", joindate=" + joindate
				+ ", salary=" + salary + "]";
	}

}


14.com.app.repository

i.EmployeeRepository

i]

package com.app.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.app.pojos.Employee;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {	
	

}


15.com.app.service

i.EmployeeService
ii.EmployeeServiceImpl


i]

package com.app.service;

import java.util.List;

import com.app.pojos.Employee;



public interface EmployeeService 
{
	List<Employee> getAllEmpDetails();
	Employee addEmpDetails(Employee newemp);
	String deleteEmpDetails(Long empid);
	Employee updateEmpDetails(Employee newupdate);
	

}


ii]

package com.app.service;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.pojos.Employee;
import com.app.repository.EmployeeRepository;

@Service
@Transactional

public class EmployeeServiceImpl implements EmployeeService {
	
	@Autowired
	private EmployeeRepository emprepo;

	@Override
	public List<Employee> getAllEmpDetails() {
		
		return emprepo.findAll();
	}

	@Override
	public Employee addEmpDetails(Employee newemp) {

		return emprepo.save(newemp);
	}

	@Override
	public String deleteEmpDetails(Long empid) {
		if(emprepo.existsById(empid)) {
			 emprepo.deleteById(empid);
			 return "Emp Details Deleted";
		}
		return "Failed :Invalid Empid";
	}

	@Override
	public Employee updateEmpDetails(Employee newupdate) {

	return emprepo.save(newupdate);

	}

}

15.input Dependency in pom.xml

		<!-- Swagger UI -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.6.4</version>
		</dependency>


16.Right Click on EmpCrudOp >Run As>Spring Boot App

80.

   http://localhost:8080/employees/swagger-ui.html